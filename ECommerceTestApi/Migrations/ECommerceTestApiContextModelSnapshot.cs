// <auto-generated />
using System;
using ECommerceTestApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ECommerceTestApi.Migrations
{
    [DbContext(typeof(ECommerceTestApiContext))]
    partial class ECommerceTestApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ECommerceTestApi.Infrastructure.DataModel.CategoryDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ChildCategoryId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LevelDeep");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("ChildCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ECommerceTestApi.Infrastructure.DataModel.CategoryItemDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CategoryId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ItemId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ItemId");

                    b.ToTable("CategoryItems");
                });

            modelBuilder.Entity("ECommerceTestApi.Infrastructure.DataModel.ItemDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BuyPrice");

                    b.Property<long>("Count");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<double>("SellPrice");

                    b.Property<long>("StoreId");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ECommerceTestApi.Infrastructure.DataModel.OrderDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("SerialNum");

                    b.Property<long>("StoreId");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerceTestApi.Infrastructure.DataModel.OrderItemDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ItemId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("OrderId");

                    b.Property<long>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommerceTestApi.Infrastructure.DataModel.CategoryDto", b =>
                {
                    b.HasOne("ECommerceTestApi.Infrastructure.DataModel.CategoryDto", "ChildCategory")
                        .WithMany()
                        .HasForeignKey("ChildCategoryId");
                });

            modelBuilder.Entity("ECommerceTestApi.Infrastructure.DataModel.CategoryItemDto", b =>
                {
                    b.HasOne("ECommerceTestApi.Infrastructure.DataModel.CategoryDto", "Category")
                        .WithMany("CategoryItems")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ECommerceTestApi.Infrastructure.DataModel.ItemDto", "Item")
                        .WithMany("CategoryItems")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("ECommerceTestApi.Infrastructure.DataModel.OrderItemDto", b =>
                {
                    b.HasOne("ECommerceTestApi.Infrastructure.DataModel.ItemDto", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId");

                    b.HasOne("ECommerceTestApi.Infrastructure.DataModel.OrderDto", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");
                });
#pragma warning restore 612, 618
        }
    }
}
